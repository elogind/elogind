<?xml version='1.0'?> <!--*-nxml-*-->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- SPDX-License-Identifier: LGPL-2.1-or-later -->

<refentry id="loginctl" conditional='ENABLE_LOGIND'
    xmlns:xi="http://www.w3.org/2001/XInclude">

  <refentryinfo>
    <title>loginctl</title>
    <productname>elogind</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>loginctl</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>loginctl</refname>
    <refpurpose>Control the elogind login manager</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>loginctl</command>
      <arg choice="opt" rep="repeat">OPTIONS</arg>
      <arg choice="req">COMMAND</arg>
      <arg choice="opt" rep="repeat">NAME</arg>
    </cmdsynopsis>
    <!-- 1 /// elogind has no service files, so describe the hook dirs here -->
    <para><filename>/lib/elogind/system-shutdown</filename></para>
    <para><filename>/lib/elogind/system-sleep</filename></para>
    <!-- // 1 -->
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para><command>loginctl</command> may be used to introspect and
    control the state of the
    <!-- 0 /// elogind has no services and is in section 8
    <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    login manager
    <citerefentry><refentrytitle>systemd-logind.service</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>
    --><!-- else // 0 -->
    <citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry>
    login manager</para>
    <!-- // 0 -->
  </refsect1>

  <refsect1>
    <title>Commands</title>

    <para>The following commands are understood:</para>

    <refsect2><title>Session Commands</title><variablelist>

      <varlistentry>
        <term><command>list-sessions</command></term>

        <listitem><para>List current sessions.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>session-status</command> <optional><replaceable>ID</replaceable>…</optional></term>

        <listitem><para>Show terse runtime status information about
        one or more sessions, followed by the most recent log data
        from the journal. Takes one or more session identifiers as
        parameters. If no session identifiers are passed, the status of
        the caller's session is shown. This function is intended to
        generate human-readable output. If you are looking for
        computer-parsable output, use <command>show-session</command>
        instead.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>show-session</command> <optional><replaceable>ID</replaceable>…</optional></term>

        <listitem><para>Show properties of one or more sessions or the
        manager itself. If no argument is specified, properties of the
        manager will be shown. If a session ID is specified,
        properties of the session are shown. By default, empty
        properties are suppressed. Use <option>--all</option> to show
        those too. To select specific properties to show, use
        <option>--property=</option>. This command is intended to be
        used whenever computer-parsable output is required. Use
        <command>session-status</command> if you are looking for
        formatted human-readable output.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>activate</command> <optional><replaceable>ID</replaceable></optional></term>

        <listitem><para>Activate a session. This brings a session into
        the foreground if another session is currently in the
        foreground on the respective seat. Takes a session identifier
        as argument. If no argument is specified, the session of the
        caller is put into foreground.</para>

        <xi:include href="version-info.xml" xpointer="v219"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>lock-session</command> <optional><replaceable>ID</replaceable>…</optional></term>
        <term><command>unlock-session</command> <optional><replaceable>ID</replaceable>…</optional></term>

        <listitem><para>Activates/deactivates the screen lock on one
        or more sessions, if the session supports it. Takes one or
        more session identifiers as arguments. If no argument is
        specified, the session of the caller is locked/unlocked.
        </para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>lock-sessions</command></term>
        <term><command>unlock-sessions</command></term>

        <listitem><para>Activates/deactivates the screen lock on all
        current sessions supporting it. </para>

        <xi:include href="version-info.xml" xpointer="v188"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>terminate-session</command> <replaceable>ID</replaceable>…</term>

        <listitem><para>Terminates a session. This kills all processes of the session and deallocates all
        resources attached to the session. If the argument is specified as empty string the session invoking
        the command is terminated.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>kill-session</command> <replaceable>ID</replaceable>…</term>

        <listitem><para>Send a signal to one or more processes of the session. Use
        <option>--kill-whom=</option> to select which process to kill. Use <option>--signal=</option> to
        select the signal to send. If the argument is specified as empty string the signal is sent to the
        session invoking the command.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>
    </variablelist></refsect2>

    <refsect2><title>User Commands</title><variablelist>
      <varlistentry>
        <term><command>list-users</command></term>

        <listitem><para>List currently logged in users.
        </para></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>user-status</command> <optional><replaceable>USER</replaceable>…</optional></term>

        <listitem><para>Show terse runtime status information about
        one or more logged in users, followed by the most recent log
        data from the journal. Takes one or more user names or numeric
        user IDs as parameters. If no parameters are passed, the status
        is shown for the user of the session of the caller. This
        function is intended to generate human-readable output. If you
        are looking for computer-parsable output, use
        <command>show-user</command> instead.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>show-user</command> <optional><replaceable>USER</replaceable>…</optional></term>

        <listitem><para>Show properties of one or more users or the
        manager itself. If no argument is specified, properties of the
        manager will be shown. If a user is specified, properties of
        the user are shown. By default, empty properties are
        suppressed. Use <option>--all</option> to show those too. To
        select specific properties to show, use
        <option>--property=</option>. This command is intended to be
        used whenever computer-parsable output is required. Use
        <command>user-status</command> if you are looking for
        formatted human-readable output.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <!-- 0 /// elogind does not spawn a user manager. Mask until lingeringin elogind is clarified.
      <varlistentry>
        <term><command>enable-linger</command> <optional><replaceable>USER</replaceable>…</optional></term>
        <term><command>disable-linger</command> <optional><replaceable>USER</replaceable>…</optional></term>

        <listitem><para>Enable/disable user lingering for one or more
        users. If enabled for a specific user, a user manager is
        spawned for the user at boot and kept around after logouts.
        This allows users who are not logged in to run long-running
        services. Takes one or more user names or numeric UIDs as
        argument. If no argument is specified, enables/disables
        lingering for the user of the session of the caller.</para>

        <para>See also <varname>KillUserProcesses=</varname> setting in
        <citerefentry><refentrytitle>logind.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
        </para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>
      // 0 -->

      <varlistentry>
        <term><command>terminate-user</command> <replaceable>USER</replaceable>…</term>

        <listitem><para>Terminates all sessions of a user. This kills all processes of all sessions of the
        user and deallocates all runtime resources attached to the user. If the argument is specified as
        empty string the sessions of the user invoking the command are terminated.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>kill-user</command> <replaceable>USER</replaceable>…</term>

        <listitem><para>Send a signal to all processes of a user. Use <option>--signal=</option> to select
        the signal to send. If the argument is specified as empty string the signal is sent to the sessions
        of the user invoking the command.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>
    </variablelist></refsect2>

    <refsect2><title>Seat Commands</title><variablelist>
      <varlistentry>
        <term><command>list-seats</command></term>

        <listitem><para>List currently available seats on the local
        system.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>seat-status</command> <optional><replaceable>NAME</replaceable>…</optional></term>

        <listitem><para>Show terse runtime status information about
        one or more seats. Takes one or more seat names as parameters.
        If no seat names are passed the status of the caller's
        session's seat is shown. This function is intended to generate
        human-readable output. If you are looking for
        computer-parsable output, use <command>show-seat</command>
        instead.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>show-seat</command> <optional><replaceable>NAME</replaceable>…</optional></term>

        <listitem><para>Show properties of one or more seats or the
        manager itself. If no argument is specified, properties of the
        manager will be shown. If a seat is specified, properties of
        the seat are shown. By default, empty properties are
        suppressed. Use <option>--all</option> to show those too. To
        select specific properties to show, use
        <option>--property=</option>. This command is intended to be
        used whenever computer-parsable output is required. Use
        <command>seat-status</command> if you are looking for
        formatted human-readable output.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>attach</command> <replaceable>NAME</replaceable> <replaceable>DEVICE</replaceable>…</term>

        <listitem><para>Persistently attach one or more devices to a
        seat. The devices should be specified via device paths in the
        <filename>/sys/</filename> file system. To create a new seat,
        attach at least one graphics card to a previously unused seat
        name. Seat names may consist only of a–z, A–Z, 0–9,
        <literal>-</literal> and <literal>_</literal> and must be
        prefixed with <literal>seat</literal>. To drop assignment of a
        device to a specific seat, just reassign it to a different
        seat, or use <command>flush-devices</command>.
        </para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>flush-devices</command></term>

        <listitem><para>Removes all device assignments previously
        created with <command>attach</command>. After this call, only
        automatically generated seats will remain, and all seat
        hardware is assigned to them.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><command>terminate-seat</command> <replaceable>NAME</replaceable>…</term>

        <listitem><para>Terminates all sessions on a seat. This kills
        all processes of all sessions on the seat and deallocates all
        runtime resources attached to them.</para>

        <xi:include href="version-info.xml" xpointer="v233"/></listitem>
      </varlistentry>
    </variablelist></refsect2>

    <!-- 1 /// elogind additionally supports a few systemctl commands. -->
    <refsect2><title>System Commands</title><variablelist>

        <varlistentry>
          <term><command>reload</command></term>

          <listitem>
            <para>Reload the elogind configuration. While the daemon is being reloaded, all sockets elogind listens on
            behalf of user configuration will stay accessible.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>poweroff</command></term>

          <listitem>
            <para>Shut down and power-off the system. This is mostly equivalent to <command>shutdown -h</command>.
            This command is asynchronous; it will return after the power-off operation is enqueued, without
            waiting for it to complete.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>reboot</command> <optional>--firmware-setup</optional></term>

          <listitem>
            <para>Shut down and reboot the system. This is mostly equivalent to <command>shutdown -r</command>.
            This command is asynchronous; it will return after the reboot operation is enqueued, without waiting for it
            to complete.</para>

            <para>If the optional argument <option>--firmware-setup</option> is given, indicate to the
            system's firmware to reboot into the firmware setup interface. Note that this functionality is not available
            on all systems.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>suspend</command></term>

          <listitem>
            <para>Suspend the system. This will tell all processes registered via dbus to prepare for suspension. This
            command is asynchronous, and will return after the suspend operation is successfully enqueued. It will not
            wait for the suspend/resume cycle to complete.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>hibernate</command></term>

          <listitem>
            <para>Hibernate the system. This will tell all processes registered via dbus to prepare for hibernation.
            This command is asynchronous, and will return after the hibernation operation is successfully enqueued. It
            will not wait for the hibernate/thaw cycle to complete.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>hybrid-sleep</command></term>

          <listitem>
            <para>Hibernate and suspend the system. This will tell all processes registered via dbus to prepare for
            hybrid-sleep. This command is asynchronous, and will return after the hybrid sleep operation is successfully
            enqueued. It will not wait for the sleep/wake-up cycle to complete.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><command>suspend-then-hibernate</command></term>

          <listitem>
            <para>Suspend the system and hibernate it after the delay specified in <filename>/etc/elogind/sleep.conf</filename>.
            This will tell all processes registered via dbus to prepare for suspend-then-hibernate. This command is
            asynchronous, and will return after the hybrid sleep operation is successfully enqueued. It will not wait
            for the sleep/wake-up or hibernate/thaw cycle to complete.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
    <refsect2><title>Hook directories</title>
      <variablelist>
        <varlistentry>
          <term><option>[/usr]/lib[64]/elogind/system-sleep/</option>, <option>/etc/elogind/system-sleep/</option></term>

          <listitem>
            <para>Immediately before entering system suspend and/or hibernation elogind will run all executables in
            <option>[/usr]/lib[64]/elogind/system-sleep/</option> and <option>/etc/elogind/system-sleep/</option> and
            pass two arguments to them. The first argument will be <literal>pre</literal>, the second either
            <literal>suspend</literal>, <literal>hibernate</literal>, <literal>hybrid-sleep</literal>, or
            <literal>suspend-then-hibernate</literal>, depending on the chosen action.
            Immediately after leaving system suspend and/or hibernation the same executables are run, but the first argument
            is now <literal>post</literal>. All executables in this directory are executed sequentially, and execution of
            the action is not continued until all executables have finished.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>[/usr]/lib[64]/elogind/system-shutdown/</option>, <option>/etc/elogind/system-shutdown/</option></term>

          <listitem>
            <para>Immediately before rebooting or powering the system off, elogind will run all executables in
            <option>[/usr]/lib[64]/elogind/system-shutdown/</option> and <option>/etc/elogind/system-shutdown/</option>
              and pass one argument to them. The argument will either be <literal>poweroff</literal> or
            <literal>reboot</literal>, depending on the chosen action.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>AllowPowerOffInterrupts</option>, <option>AllowSuspendInterrupts</option></term>

          <listitem>
            <para>Whether the executables in these directories run successfully or not is of no concern to elogind.
            If you want the scripts to cause the action to be cancelled if one fails, you can set
            <literal>AllowPowerOffInterrupts</literal> and/or <literal>AllowSuspendInterrupts</literal> to
            <literal>yes</literal> in <filename>/etc/elogind/sleep.conf</filename>.
            For this to work the executables in question must print an error message to <literal>STDOUT</literal> that
            begins with either of these keywords: <literal>CANCELLED</literal>, <literal>CRITICAL</literal>,
            <literal>ERROR</literal> or <literal>FAILED</literal>. If you want any of these words in a message without
            causing the action to be cancelled, just re-arrange the sentence in question so that the keyword is not the
            first word.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>BroadcastPowerOffInterrupts</option>, <option>BroadcastSuspendInterrupts</option></term>

          <listitem>
            <para>By default an interrupt of a power off or a suspend is broadcasted. If you do not whish these
              broadcasts to happen, change <literal>BroadcastPowerOffInterrupts</literal> and/or
              <literal>BroadcastSuspendInterrupts</literal> to <literal>no</literal> in
              <filename>/etc/elogind/sleep.conf</filename>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Note that scripts or binaries dropped in any of the hook directories are intended for local use only and
        should be considered hacks.
        If applications want to react to these system commands, they should rather use the
        <ulink url="https://www.freedesktop.org/wiki/Software/systemd/inhibit">Inhibitor interface</ulink>.</para>
    </refsect2>
  </refsect1>
  <!-- // 1 -->

  <refsect1>
    <title>Options</title>

    <para>The following options are understood:</para>

    <variablelist>
      <varlistentry>
        <term><option>--no-ask-password</option></term>

        <listitem><para>Do not query the user for authentication for
        privileged operations.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-p</option></term>
        <term><option>--property=</option></term>

        <listitem><para>When showing session/user/seat properties,
        limit display to certain properties as specified as argument.
        If not specified, all set properties are shown. The argument
        should be a property name, such as
        <literal>Sessions</literal>. If specified more than once, all
        properties with the specified names are
        shown.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--value</option></term>

        <listitem><para>When showing session/user/seat properties,
        only print the value, and skip the property name and
        <literal>=</literal>.</para>

        <xi:include href="version-info.xml" xpointer="v230"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-a</option></term>
        <term><option>--all</option></term>

        <listitem><para>When showing session/user/seat properties,
        show all properties regardless of whether they are set or
        not.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-l</option></term>
        <term><option>--full</option></term>

        <listitem><para>Do not ellipsize process tree entries.</para>

        <xi:include href="version-info.xml" xpointer="v198"/>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--kill-whom=</option></term>

        <listitem><para>When used with
        <command>kill-session</command>, choose which processes to
        kill. Must be one of <option>leader</option>, or
        <option>all</option> to select whether to kill only the leader
        process of the session or all processes of the session. If
        omitted, defaults to <option>all</option>.</para>

        <xi:include href="version-info.xml" xpointer="v252"/></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-s</option></term>
        <term><option>--signal=</option></term>

        <listitem><para>When used with <command>kill-session</command> or <command>kill-user</command>,
        choose which signal to send to selected processes. Must be one of the well known signal specifiers,
        such as <constant>SIGTERM</constant>, <constant>SIGINT</constant> or <constant>SIGSTOP</constant>.
        If omitted, defaults to <constant>SIGTERM</constant>.</para>

        <para>The special value <literal>help</literal> will list the known values and the program will exit
        immediately, and the special value <literal>list</literal> will list known values along with the
        numerical signal numbers and the program will exit immediately.</para></listitem>
      </varlistentry>

      <!-- 0 /// nope, elogind does not need this, as there is mno journald around
      <varlistentry>
        <term><option>-n</option></term>
        <term><option>&#x2D;&#x2D;lines=</option></term>

        <listitem><para>When used with <command>user-status</command>
        and <command>session-status</command>, controls the number of
        journal lines to show, counting from the most recent ones.
        Takes a positive integer argument. Defaults to 10.</para>

        <xi:include href="version-info.xml" xpointer="v219"/>
        </listitem>
      </varlistentry>
      // 0 -->

      <varlistentry>
        <term><option>-o</option></term>
        <term><option>--output=</option></term>

        <listitem><para>When used with <command>user-status</command>
        and <command>session-status</command>, controls the formatting
<!-- 0 /// elogind does not ship journalctl
        of the journal entries that are shown. For the available
        choices, see
        <citerefentry><refentrytitle>journalctl</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
        Defaults to <literal>short</literal>.</para>
--><!-- else // 0 -->
        of the journal entries that are shown.
        Defaults to <literal>short</literal>.</para>
<!-- // 0 -->

        <xi:include href="version-info.xml" xpointer="v219"/></listitem>
      </varlistentry>

      <!-- 1 /// elogind has a few options on its own. -->
      <varlistentry>
        <term><option>-c</option></term>

        <listitem><para>Cancel a pending shutdown or reboot.</para></listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-i</option></term>
        <term><option>--ignore-inhibitors</option></term>

        <listitem>
          <para>When system shutdown or a sleep state is requested, ignore inhibitor locks. Applications can establish
          inhibitor locks to avoid that certain important operations (such as CD burning or suchlike) are interrupted
          by system shutdown or a sleep state. Any user may take these locks and privileged users may override these
          locks. If any locks are taken, shutdown and sleep state requests will normally fail (unless privileged) and a
          list of active locks is printed. However, if <option>--ignore-inhibitors</option> is specified, the
          established locks are ignored and not shown, and the operation attempted anyway, possibly requiring
          additional privileges.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--dry-run</option></term>

        <listitem>
          <para>Just print what would be done. Currently supported by verbs
          <command>halt</command>, <command>poweroff</command>, <command>reboot</command>,
          <command>suspend</command>, <command>hibernate</command>, <command>hybrid-sleep</command>,
          and <command>suspend-then-hibernate</command>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--no-wall</option></term>

        <listitem>
          <para>Do not send wall messages before halt, power-off and reboot.</para>
        </listitem>
      </varlistentry>
      <!-- // 1 -->

      <!-- 0 /// elogind has no user option
      <xi:include href="user-system-options.xml" xpointer="host" />
      <xi:include href="user-system-options.xml" xpointer="machine" />
      // 0 -->

      <xi:include href="standard-options.xml" xpointer="no-pager" />
      <xi:include href="standard-options.xml" xpointer="no-legend" />
      <xi:include href="standard-options.xml" xpointer="help" />
      <xi:include href="standard-options.xml" xpointer="version" />
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Exit status</title>

    <para>On success, 0 is returned, a non-zero failure code
    otherwise.</para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <example>
      <title>Querying user status</title>

<!-- 0 /// Looks a bit different with elogind
      <programlisting>$ loginctl user-status
fatima (1005)
           Since: Sat 2016-04-09 14:23:31 EDT; 54min ago
           State: active
        Sessions: 5 *3
            Unit: user-1005.slice
                  ├─user@1005.service
                    …
                  ├─session-3.scope
                    …
                  └─session-5.scope
                    ├─3473 login &#x2D;&#x2D; fatima
                    └─3515 -zsh

Apr 09 14:40:30 laptop login[2325]: pam_unix(login:session):
                       session opened for user fatima by LOGIN(uid=0)
Apr 09 14:40:30 laptop login[2325]: LOGIN ON tty3 BY fatima
</programlisting>

      <para>There are two sessions, 3 and 5. Session 3 is a graphical session,
      marked with a star. The tree of processing including the two corresponding
      scope units and the user manager unit are shown.</para>
--><!-- else // 0 -->
      <programlisting>$ loginctl user-status
sed (1004)
           Since: Wed 2020-01-29 20:32:00 CET; 3 days ago
           State: active
        Sessions: 3 *2
          Linger: no
            Unit: user-1004.slice
</programlisting>
      <para>There are two sessions, 2 and 3. The session 2 is a graphical session,
      marked with a star. Uptime, state, lingering state und the user unit are shown.
      The user unit is an artificial construct, elogind does not really support
      systemd units and slices.</para>
<!-- // 0 -->
    </example>
  </refsect1>

  <xi:include href="common-variables.xml" />

  <refsect1>
    <title>See Also</title>
      <!-- 0 /// elogind is in sectin 8 and has neither systemctl nor service files
      --><!-- else // 0 -->
      <citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
      <!-- // 0 -->
    <para><simplelist type="inline">
      <member><citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>systemctl</refentrytitle><manvolnum>1</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>elogind.service</refentrytitle><manvolnum>8</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>logind.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry></member>
    </simplelist></para>
  </refsect1>

</refentry>
