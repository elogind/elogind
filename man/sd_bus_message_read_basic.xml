<?xml version='1.0'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<!--
  SPDX-License-Identifier: LGPL-2.1-or-later

  Copyright Â© 2016 Julian Orth
-->

<refentry id="sd_bus_message_read_basic">

  <refentryinfo>
    <title>sd_bus_message_read_basic</title>
    <productname>elogind</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sd_bus_message_read_basic</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>sd_bus_message_read_basic</refname>

    <refpurpose>Read a basic type from a message</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;elogind/sd-bus.h&gt;</funcsynopsisinfo>

      <funcprototype>
        <funcdef>int <function>sd_bus_message_read_basic</function></funcdef>
        <paramdef>sd_bus_message *<parameter>m</parameter></paramdef>
        <paramdef>char <parameter>type</parameter></paramdef>
        <paramdef>void *<parameter>p</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para>
      <function>sd_bus_message_read_basic()</function> reads a basic type from a
      message and advances the read position in the message. The set of basic
      types and their ascii codes passed in <parameter>type</parameter> are
      described in the <ulink
        url="https://dbus.freedesktop.org/doc/dbus-specification.html">D-Bus
        Specification</ulink>.
    </para>

    <para>
      If <parameter>p</parameter> is not <constant>NULL</constant>, it should contain a pointer to an
      appropriate object. For example, if <parameter>type</parameter> is <constant>'y'</constant>, the object
      passed in <parameter>p</parameter> should have type <type>uint8_t *</type>. If
      <parameter>type</parameter> is <constant>'s'</constant>, the object passed in <parameter>p</parameter>
      should have type <type>const char **</type>. Note that, if the basic type is a pointer (e.g.,
      <type>const char *</type> in the case of a string), the pointer is only borrowed and the contents must
      be copied if they are to be used after the end of the message's lifetime. Similarly, during the
      lifetime of such a pointer, the message must not be modified. If <parameter>type</parameter> is
      <constant>'h'</constant> (UNIX file descriptor), the descriptor is not duplicated by this call and the
      returned descriptor remains in possession of the message object, and needs to be duplicated by the
      caller in order to keep an open reference to it after the message object is freed (for example by
      calling <literal>fcntl(fd, FD_DUPFD_CLOEXEC, 3)</literal>). See the table below for a complete list of
      allowed types.
    </para>

    <table id='format-specifiers'>
      <title>Item type specifiers</title>

      <tgroup cols='4'>
        <colspec colname='specifier' />
        <colspec colname='constant' />
        <colspec colname='description' />
        <colspec colname='ctype' />
        <thead>
          <row>
            <entry>Specifier</entry>
            <entry>Constant</entry>
            <entry>Description</entry>
            <entry>Expected C Type</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>y</literal></entry>
            <entry><constant>SD_BUS_TYPE_BYTE</constant></entry>
            <entry>8-bit unsigned integer</entry>
            <entry><type>uint8_t *</type></entry>
          </row>

          <row>
            <entry><literal>b</literal></entry>
            <entry><constant>SD_BUS_TYPE_BOOLEAN</constant></entry>
            <entry>boolean</entry>
            <entry><type>int *</type> (NB: not <type>bool *</type>)</entry>
          </row>

          <row>
            <entry><literal>n</literal></entry>
            <entry><constant>SD_BUS_TYPE_INT16</constant></entry>
            <entry>16-bit signed integer</entry>
            <entry><type>int16_t *</type></entry>
          </row>

          <row>
            <entry><literal>q</literal></entry>
            <entry><constant>SD_BUS_TYPE_UINT16</constant></entry>
            <entry>16-bit unsigned integer</entry>
            <entry><type>uint16_t *</type></entry>
          </row>

          <row>
            <entry><literal>i</literal></entry>
            <entry><constant>SD_BUS_TYPE_INT32</constant></entry>
            <entry>32-bit signed integer</entry>
            <entry><type>int32_t *</type></entry>
          </row>

          <row>
            <entry><literal>u</literal></entry>
            <entry><constant>SD_BUS_TYPE_UINT32</constant></entry>
            <entry>32-bit unsigned integer</entry>
            <entry><type>uint32_t *</type></entry>
          </row>

          <row>
            <entry><literal>x</literal></entry>
            <entry><constant>SD_BUS_TYPE_INT64</constant></entry>
            <entry>64-bit signed integer</entry>
            <entry><type>int64_t *</type></entry>
          </row>

          <row>
            <entry><literal>t</literal></entry>
            <entry><constant>SD_BUS_TYPE_UINT64</constant></entry>
            <entry>64-bit unsigned integer</entry>
            <entry><type>uint64_t *</type></entry>
          </row>

          <row>
            <entry><literal>d</literal></entry>
            <entry><constant>SD_BUS_TYPE_DOUBLE</constant></entry>
            <entry>IEEE 754 double precision floating-point</entry>
            <entry><type>double *</type></entry>
          </row>

          <row>
            <entry><literal>s</literal></entry>
            <entry><constant>SD_BUS_TYPE_STRING</constant></entry>
            <entry>UTF-8 string</entry>
            <entry><type>const char **</type></entry>
          </row>

          <row>
            <entry><literal>o</literal></entry>
            <entry><constant>SD_BUS_TYPE_OBJECT_PATH</constant></entry>
            <entry>D-Bus object path string</entry>
            <entry><type>const char **</type></entry>
          </row>

          <row>
            <entry><literal>g</literal></entry>
            <entry><constant>SD_BUS_TYPE_SIGNATURE</constant></entry>
            <entry>D-Bus signature string</entry>
            <entry><type>const char **</type></entry>
          </row>

          <row>
            <entry><literal>h</literal></entry>
            <entry><constant>SD_BUS_TYPE_UNIX_FD</constant></entry>
            <entry>UNIX file descriptor</entry>
            <entry><type>int *</type></entry>
          </row>
       </tbody>
      </tgroup>
    </table>

    <para>
      If there is no object of the specified type at the current position in the
      message, an error is returned.
    </para>
  </refsect1>

  <refsect1>
    <title>Return Value</title>

    <para>
      On success, <function>sd_bus_message_read_basic()</function> returns a positive integer.
      If the end of the currently opened array has been reached, it returns 0.
      On failure, it returns a negative errno-style error code.
    </para>

    <refsect2 id='errors'>
      <title>Errors</title>

      <para>Returned errors may indicate the following problems:</para>

      <variablelist>
        <varlistentry id="errors-einval">
          <term><constant>-EINVAL</constant></term>

          <listitem><para>Specified type string is invalid or the message parameter is
          <constant>NULL</constant>.</para></listitem>
        </varlistentry>

        <varlistentry id="errors-enxio">
          <term><constant>-ENXIO</constant></term>

          <listitem><para>The message does not contain the specified type at current position.
          </para></listitem>
        </varlistentry>

        <varlistentry id="errors-ebadmsg">
          <term><constant>-EBADMSG</constant></term>

          <listitem><para>The message cannot be parsed.</para></listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>See Also</title>

    <para>
      <!-- 0 /// elogind is in section 8
      <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd-bus</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_bus_message_append_basic</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_bus_message_skip</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_bus_message_read</refentrytitle><manvolnum>3</manvolnum></citerefentry>
      --><!-- else // 0 -->
      <citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
      <!-- // 0 -->
    </para>
  </refsect1>

</refentry>
