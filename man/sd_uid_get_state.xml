<?xml version='1.0'?> <!--*-nxml-*-->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- SPDX-License-Identifier: LGPL-2.1-or-later -->

<refentry id="sd_uid_get_state" conditional='HAVE_PAM'
          xmlns:xi="http://www.w3.org/2001/XInclude">

  <refentryinfo>
    <title>sd_uid_get_state</title>
    <productname>elogind</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sd_uid_get_state</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>sd_uid_get_state</refname>
    <refname>sd_uid_is_on_seat</refname>
    <refname>sd_uid_get_sessions</refname>
    <refname>sd_uid_get_seats</refname>
    <refname>sd_uid_get_display</refname>
    <refname>sd_uid_get_login_time</refname>
    <refpurpose>Determine login state of a specific Unix user ID</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;elogind/sd-login.h&gt;</funcsynopsisinfo>

      <funcprototype>
        <funcdef>int <function>sd_uid_get_state</function></funcdef>
        <paramdef>uid_t <parameter>uid</parameter></paramdef>
        <paramdef>char **<parameter>state</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>int <function>sd_uid_is_on_seat</function></funcdef>
        <paramdef>uid_t <parameter>uid</parameter></paramdef>
        <paramdef>int <parameter>require_active</parameter></paramdef>
        <paramdef>const char *<parameter>seat</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>int <function>sd_uid_get_sessions</function></funcdef>
        <paramdef>uid_t <parameter>uid</parameter></paramdef>
        <paramdef>int <parameter>require_active</parameter></paramdef>
        <paramdef>char ***<parameter>sessions</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>int <function>sd_uid_get_seats</function></funcdef>
        <paramdef>uid_t <parameter>uid</parameter></paramdef>
        <paramdef>int <parameter>require_active</parameter></paramdef>
        <paramdef>char ***<parameter>seats</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>int <function>sd_uid_get_display</function></funcdef>
        <paramdef>uid_t <parameter>uid</parameter></paramdef>
        <paramdef>char **<parameter>session</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>

    <funcprototype>
       <funcdef>int <function>sd_uid_get_login_time</function></funcdef>
       <paramdef>uid_t <parameter>uid</parameter></paramdef>
       <paramdef>uint64_t *<parameter>usec</parameter></paramdef>
    </funcprototype>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para><function>sd_uid_get_state()</function> may be used to
    determine the login state of a specific Unix user identifier. The
    following states are currently known: <literal>offline</literal>
    (user not logged in at all), <literal>lingering</literal> (user
    not logged in, but some user services running),
    <literal>online</literal> (user logged in, but not active, i.e.
    has no session in the foreground), <literal>active</literal> (user
    logged in, and has at least one active session, i.e. one session
    in the foreground), <literal>closing</literal> (user not logged
    in, and not lingering, but some processes are still around). In
    the future additional states might be defined, client code should
    be written to be robust in regards to additional state strings
    being returned. The returned string needs to be freed with the
    libc
    <citerefentry project='man-pages'><refentrytitle>free</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    call after use.</para>

    <para><function>sd_uid_is_on_seat()</function> may be used to
    determine whether a specific user is logged in or active on a
    specific seat. Accepts a Unix user identifier and a seat
    identifier string as parameters. The
    <parameter>require_active</parameter> parameter is a boolean
    value. If non-zero (true), this function will test if the user is
    active (i.e. has a session that is in the foreground and accepting
    user input) on the specified seat, otherwise (false) only if the
    user is logged in (and possibly inactive) on the specified
    seat.</para>

    <para><function>sd_uid_get_sessions()</function> may be used to
    determine the current sessions of the specified user. Accepts a
    Unix user identifier as parameter. The
    <parameter>require_active</parameter> parameter controls whether
    the returned list shall consist of only those sessions where the
    user is currently active (&gt; 0), where the user is currently
    online but possibly inactive (= 0), or logged in but
    possibly closing the session (&lt; 0). The call returns a
    <constant>NULL</constant> terminated string array of session
    identifiers in <parameter>sessions</parameter> which needs to be
    freed by the caller with the libc
    <citerefentry project='man-pages'><refentrytitle>free</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    call after use, including all the strings referenced. If the
    string array parameter is passed as <constant>NULL</constant>, the
    array will not be filled in, but the return code still indicates
    the number of current sessions. Note that instead of an empty
    array <constant>NULL</constant> may be returned and should be
    considered equivalent to an empty array.</para>

    <para>Similarly, <function>sd_uid_get_seats()</function> may be
    used to determine the list of seats on which the user currently
    has sessions. Similar semantics apply, however note that the user
    may have multiple sessions on the same seat as well as sessions
    with no attached seat and hence the number of entries in the
    returned array may differ from the one returned by
    <function>sd_uid_get_sessions()</function>.</para>

    <para><function>sd_uid_get_display()</function> returns the name
    of the "primary" session of a user. If the user has graphical
    sessions, it will be the oldest graphical session. Otherwise, it
    will be the oldest open session.</para>

    <para><function>sd_uid_get_login_time()</function> may be used to
    determine the time the user's service manager has been invoked,
    which is the time when the user's first active session, since which
    they stayed logged in continuously, began. The <parameter>usec</parameter>
    is in microseconds since the epoch (<constant>CLOCK_REALTIME</constant>).
    This call will fail with <constant>-ENXIO</constant> if the user is not
    currently logged in.</para>
  </refsect1>

  <refsect1>
    <title>Return Value</title>

    <para>On success, <function>sd_uid_get_state()</function> and
    <function>sd_uid_get_login_time()</function> returns 0 or a positive
    integer. If the test succeeds, <function>sd_uid_is_on_seat()</function>
    returns a positive integer; if it fails, 0. <function>sd_uid_get_sessions()</function>
    and <function>sd_uid_get_seats()</function> return the number of entries
    in the returned arrays. <function>sd_uid_get_display()</function>
    returns a non-negative code on success. On failure, these calls return
    a negative errno-style error code.</para>

    <refsect2>
      <title>Errors</title>

      <para>Returned errors may indicate the following problems:</para>

      <variablelist>

        <varlistentry>
          <term><constant>-ENODATA</constant></term>

          <listitem><para>The given field is not specified for the described user.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>-ENXIO</constant></term>

          <listitem><para>The specified seat is unknown.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>-EINVAL</constant></term>

          <listitem><para>An input parameter was invalid (out of range, or <constant>NULL</constant>,
          where that is not accepted). This is also returned if the passed user ID is
          <constant>0xFFFF</constant> or <constant>0xFFFFFFFF</constant>, which are undefined on Linux.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>-ENOMEM</constant></term>

          <listitem><para>Memory allocation failed.</para></listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

  <xi:include href="libelogind-pkgconfig.xml" />

  <refsect1>
    <title>See Also</title>

    <para>
      <!-- 0 /// elogind is in section 8
      <citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      --><!-- else // 0 -->
      <citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
      <!-- // 0 -->
      <citerefentry><refentrytitle>sd-login</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>sd_pid_get_owner_uid</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    </para>
  </refsect1>

</refentry>
