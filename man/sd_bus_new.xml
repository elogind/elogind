<?xml version='1.0'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- SPDX-License-Identifier: LGPL-2.1-or-later -->

<refentry id="sd_bus_new" xmlns:xi="http://www.w3.org/2001/XInclude">

  <refentryinfo>
    <title>sd_bus_new</title>
    <productname>elogind</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sd_bus_new</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>sd_bus_new</refname>
    <refname>sd_bus_ref</refname>
    <refname>sd_bus_unref</refname>
    <refname>sd_bus_unrefp</refname>
    <refname>sd_bus_close_unref</refname>
    <refname>sd_bus_close_unrefp</refname>
    <refname>sd_bus_flush_close_unref</refname>
    <refname>sd_bus_flush_close_unrefp</refname>

    <refpurpose>Create a new bus object and create or destroy references to it</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;elogind/sd-bus.h&gt;</funcsynopsisinfo>

      <funcprototype>
        <funcdef>int <function>sd_bus_new</function></funcdef>
        <paramdef>sd_bus **<parameter>bus</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sd_bus *<function>sd_bus_ref</function></funcdef>
        <paramdef>sd_bus *<parameter>bus</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sd_bus *<function>sd_bus_unref</function></funcdef>
        <paramdef>sd_bus *<parameter>bus</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sd_bus *<function>sd_bus_close_unref</function></funcdef>
        <paramdef>sd_bus *<parameter>bus</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>sd_bus *<function>sd_bus_flush_close_unref</function></funcdef>
        <paramdef>sd_bus *<parameter>bus</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>void <function>sd_bus_unrefp</function></funcdef>
        <paramdef>sd_bus **<parameter>busp</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>void <function>sd_bus_close_unrefp</function></funcdef>
        <paramdef>sd_bus **<parameter>busp</parameter></paramdef>
      </funcprototype>

      <funcprototype>
        <funcdef>void <function>sd_bus_flush_close_unrefp</function></funcdef>
        <paramdef>sd_bus **<parameter>busp</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>

    <para><function>sd_bus_new()</function> creates a new bus
    object. This object is reference-counted, and will be destroyed
    when all references are gone. Initially, the caller of this
    function owns the sole reference and the bus object will not be
    connected to any bus. To connect it to a bus, make sure
    to set an address with
    <citerefentry><refentrytitle>sd_bus_set_address</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    or a related call, and then start the connection with
    <citerefentry><refentrytitle>sd_bus_start</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

    <para>In most cases, it is better to use
    <citerefentry><refentrytitle>sd_bus_default_user</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
    <citerefentry><refentrytitle>sd_bus_default_system</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    or related calls instead of the more low-level <function>sd_bus_new()</function> and
    <function>sd_bus_start()</function>. The higher-level functions not only allocate a bus object but also
    start the connection to a well-known bus in a single function call.</para>

    <para><function>sd_bus_ref()</function> increases the reference
    counter of <parameter>bus</parameter> by one.</para>

    <para><function>sd_bus_unref()</function> decreases the reference
    counter of <parameter>bus</parameter> by one. Once the reference
    count has dropped to zero, <parameter>bus</parameter> is destroyed
    and cannot be used anymore, so further calls to
    <function>sd_bus_ref()</function> or
    <function>sd_bus_unref()</function> are illegal.</para>

    <para><function>sd_bus_unrefp()</function> is similar to
    <function>sd_bus_unref()</function> but takes a pointer to a
    pointer to an <type>sd_bus</type> object. This call is useful in
    conjunction with GCC's and LLVM's <ulink
    url="https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html">Clean-up
    Variable Attribute</ulink>. Note that this function is defined as an
    inline function. Use a declaration like the following, in order to
    allocate a bus object that is freed automatically as the code
    block is left:</para>

    <programlisting>{
  __attribute__((cleanup(sd_bus_unrefp))) sd_bus *bus = NULL;
  int r;
  …
  r = sd_bus_default(&amp;bus);
  if (r &lt; 0) {
    errno = -r;
    fprintf(stderr, "Failed to allocate bus: %m\n");
  }
  …
}</programlisting>

    <para><function>sd_bus_ref()</function> and <function>sd_bus_unref()</function> execute no operation if
    the argument is <constant>NULL</constant>. <function>sd_bus_unrefp()</function> will first dereference
    its argument, which must not be <constant>NULL</constant>, and will execute no operation if
    <emphasis>that</emphasis> is <constant>NULL</constant>.</para>

    <para><function>sd_bus_close_unref()</function> is similar to <function>sd_bus_unref()</function>, but
    first executes
    <citerefentry><refentrytitle>sd_bus_close</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
    ensuring that the connection is terminated before the reference to the connection is dropped and possibly
    the object freed.</para>

    <para><function>sd_bus_flush_close_unref()</function> is similar to <function>sd_bus_unref()</function>,
    but first executes
    <citerefentry><refentrytitle>sd_bus_flush</refentrytitle><manvolnum>3</manvolnum></citerefentry> as well
    as <citerefentry><refentrytitle>sd_bus_close</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
    ensuring that any pending messages are synchronously flushed out before the reference to the connection
    is dropped and possibly the object freed. This call is particularly useful immediately before exiting
    from a program as it ensures that any pending outgoing messages are written out, and unprocessed but
    queued incoming messages released before the connection is terminated and released.</para>

    <para><function>sd_bus_close_unrefp()</function> is similar to
    <function>sd_bus_close_unref()</function>, but may be used in GCC's and LLVM's Clean-up Variable
    Attribute, see above. Similarly, <function>sd_bus_flush_close_unrefp()</function> is similar to
    <function>sd_bus_flush_close_unref()</function>.</para>
  </refsect1>

  <refsect1>
    <title>Return Value</title>

    <para>On success, <function>sd_bus_new()</function> returns 0 or a
    positive integer. On failure, it returns a negative errno-style
    error code.</para>

    <para><function>sd_bus_ref()</function> always returns the argument.
    </para>

    <para><function>sd_bus_unref()</function> and <function>sd_bus_flush_close_unref()</function> always return
    <constant>NULL</constant>.</para>

    <refsect2>
      <title>Errors</title>

      <para>Returned errors may indicate the following problems:</para>

      <variablelist>
        <varlistentry>
          <term><constant>-ENOMEM</constant></term>

          <listitem><para>Memory allocation failed.</para></listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

  <xi:include href="libelogind-pkgconfig.xml" />

  <refsect1>
    <title>History</title>
    <para><function>sd_bus_new()</function>,
    <function>sd_bus_ref()</function>, and
    <function>sd_bus_unref()</function> were added in version 209.</para>
    <para><function>sd_bus_unrefp()</function> was added in version 229.</para>
    <para><function>sd_bus_flush_close_unref()</function> and
    <function>sd_bus_flush_close_unrefp()</function> were added in version 240.</para>
    <para><function>sd_bus_close_unref()</function> and
    <function>sd_bus_close_unrefp()</function> were added in version 241.</para>
  </refsect1>

  <refsect1>
    <title>See Also</title>

      <!-- 0 /// elogind is in section 8
      --><!-- else // 0 -->
      <citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
      <!-- // 0 -->
    <para><simplelist type="inline">
      <member><citerefentry><refentrytitle>elogind</refentrytitle><manvolnum>8</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>sd-bus</refentrytitle><manvolnum>3</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>sd_bus_default_user</refentrytitle><manvolnum>3</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>sd_bus_default_system</refentrytitle><manvolnum>3</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>sd_bus_open_user</refentrytitle><manvolnum>3</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>sd_bus_open_system</refentrytitle><manvolnum>3</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>sd_bus_close</refentrytitle><manvolnum>3</manvolnum></citerefentry></member>
    </simplelist></para>
  </refsect1>

</refentry>
